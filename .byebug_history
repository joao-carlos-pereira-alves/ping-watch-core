c
@sites.last.class
@sites
c
@sites
@sites.class
c
Site.column_names
e
c
@sites
Site.uptime_geral(@sites)&.round(2)
@sites.where.not(status: :online).count
@sites
c
@sites.count
c
@sites.count
@sites
c
@sites.joins(:site_users).where('site_users.site_id = sites.id AND sites.domain LIKE ?', "%#{@by_site_domain}%")
@sites.joins(:site_users).where('site_users.site_id = sites.id AND sites.domain LIKE ?', "%#{by_site_domain}%")
sites.joins(:site_users).where('site_users.site_id = sites.id AND sites.domain LIKE ?', "%#{by_site_domain}%")
@sites.where
@sites.class
@sites
@site
c
params
@params
by_site_domain
c
filter_by_site_domain
filter_by_date
exit
user = create(:user, plan: Plan.last)
Plan.last
Plan.count
user = create(:user, plan: create(:plan))
user = create(:user)
User.pluck(:email)
User.count
user.create
user.save
user = build(:user)
user = create(:user)
create(:user)
let(:user) { create(:user) }
user
c
create(:site, url: 'http://example.com', status: :online)
c
let!(:sites) do
      [
        create(:site, url: 'http://example.com', status: :online,
                      created_at: Time.now)
      ]
    end
teste
teste = let(:user) { create(:user) }
let(:user) { create(:user) }
create(:user)
c
notification.valid?
notification = build(:notification, user: user, notification_receipts_count: 0, notification_method: :email,
                                         threshold_value: Notification::DEFAULT_THRESHOLD_VALUE, frequency: :hourly)
Notification.destroy_all
notification.errors
notification.valid?
notification.errors
notification = build(:notification, user: user, notification_receipts_count: 0, notification_method: :email,
                                         threshold_value: Notification::DEFAULT_THRESHOLD_VALUE, frequency: :hourly)
notification.errors
notification
notification = create(:notification, user: user, notification_receipts_count: 0, notification_method: :email,
                                         threshold_value: Notification::DEFAULT_THRESHOLD_VALUE, frequency: :hourly)
c
Notification.destroy_all
Notification.delete_all
Notification.count
Notification
notification.errors.messages
notification.errors.full_messages
notification.valid?
notification = build(:notification, user: user, notification_method: :email, threshold_value: Notification::DEFAULT_THRESHOLD_VALUE, frequency: :hourly)
create(:notification, user: user, notification_method: :email, threshold_value: Notification::DEFAULT_THRESHOLD_VALUE, frequency: :hourly)
create!(:notification, user: user, notification_method: :email, threshold_value: Notification::DEFAULT_THRESHOLD_VALUE, frequency: :hourly)
create(:notification, user: user, notification_method: :email, threshold_value: Notification::DEFAULT_THRESHOLD_VALUE, frequency: :hourly)
user
create(:notification, user: user, notification_method: :email)
create(:notification, user: user)
create(:notification)
create(:notification, user: user, notification_method: :email,
                          threshold_value: Notification::DEFAULT_THRESHOLD_VALUE, frequency: :hourly)
c
status_from_code&.eql?(check_status&.to_s)
puts 2 if alert_type&.to_s&.eql?('status_code') && check_status.present?
puts 2 if alert_type&.to_s&.eql?('status_code')
status_from_code&.eql?(check_status&.to_s)
puts 2 if alert_type&.to_s&.eql? 'status_code' && check_status
puts 2 if alert_type&.to_s&.eql? 'status_code'
puts 2 if alert_type&.to_s&.eql? 'status_code' && check_status.present?
check_status.present?
check_status
puts 2 if alert_type&.to_s&.eql? 'status_code' && check_status.present?
puts 2 if alert_type&.to_s&.eql? 'status_code'
alert_type.to_s.eql? 'status_code'
alert_type.to_s.eql?('status_code')
alert_type.to_s
alert_type.to-s
alert_type
puts 2 if alert_type&.to_s
puts 2 if alert_type&.to_s&.eql? 'status_code'
puts 2 if alert_type&.to_s&.eql? 'status_code' && check_status.present?
puts 2 if alert_type&.to_s&.eql? 'response_time' && response_time_ms.present?
alert_type&.to_s
puts 2 if alert_type&.to_s 
puts 2 if alert_type&.to_s
if alert_type&.to_s
case alert_type&.to_s
    when 'response_time' && response_time_ms.present?
      response_time_ms >= threshold_value&.to_i
    when 'status_code' && check_status.present?
      status_from_code&.eql?(check_status&.to_s)
    when 'uptime'
      # TODO: desenvolver o uptime
      false
    end
when 'response_time' && response_time_ms.present?
      response_time_ms >= threshold_value&.to_i
    when 'status_code' && check_status.present?
      status_from_code&.eql?(check_status&.to_s)
    when 'uptime'
      # TODO: desenvolver o uptime
      false
    end
alert_type
check_status
c
notification.alert_type&.eql?('response_time')
notification.alert_type&.eql?('response_time')_
notification.alert_type.response_time?
notification.alert_type
notification
self.site_checks.last
notification.threshold_value&.to_i
notification.
notification.threshold_value
self.site_checks.last.response_time_ms
self.site_checks.last.response_time_ms.class
notification.alert_type
notification.notification_method
notification
self.site_checks.last.response_time_ms
self.site_checks.last
notification.notification_method
notification.threshold_value
self.site_checks.last
self.check_sites.last
self
notification
notifcation
c
notification.errors.each { |e| e.methods }.last.attribute
notification.errors.each { |e| e.methods }.last.full_message
notification.errors.each { |e| e.methods }.last.message
notification.errors.each { |e| e.methods }.last.methods
notification.errors.each { |e| e.methods }.last
notification.errors.each { |e| e.methods }
notification.errors.each { |e| e }
notification.errors
notification.errors.count
notification.errors.last
notification.errors
c
params
@notification
c
@notification.notification_method_label
@notification
@notification.update(notification_params)
c
@notification.errors.messages
@notification.update(notification_params)
notification_params
c
params.fetch(:notification).permit(:alert_type, :frequency, :threshold_value, :enabled)
params.fetch(:notification)
params.require(:notification).permit(:alert_type, :frequency, :threshold_value, :enabled)1
params.fetch(:notification, %w[alert_type frequency threshold_value enabled])
params.fetch(:notification, %w[alert_type frequency])
params.fetch(:notification, %w[alert_type])
params.fetch(:notification, ['alert_type'])
params.fetch(:notification, {'alert_type'})
params.fetch(:notification, {})
params.fetch(:notification)
params
notification_params
@notification.errors
@notification.update(notification_params)
c
params[:id]
params
c1
Notification.find_by(uuid: params[:id])
params[:id]
:id
params
c
notification
c
sorted_status_counts&.map
datasets
c
sorted_status_counts.keys.map { |status| status.to_s.capitalize }
status_colors[sorted_status.first]
status_colors
sorted_status.last
sorted_status.first
sorted_status
c
sorted_status_counts.each do |e| e.last end
sorted_status_counts.each do |e| e end
sorted_status_counts.each do |e|
sorted_status_counts
c
self
site
site_checks.pluck(:check_status)
site_checks.pluck(:status)
site_checks.last(2)
site_checks.last
site_checks
status_counts
sorted_status_counts
c
params
@site
c
site
@site
c
@site
site
form
site
c
response_times.each(&:)
response_times.each(&:to_s)
response_times.each(&:to_i)
response_times.values&.round(3)
response_times.values
response_times
